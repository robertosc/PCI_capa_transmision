/* Generated by Yosys 0.9 (git sha1 UNKNOWN, gcc 10.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fPIC -Os) */

(* cells_not_processed =  1  *)
(* src = "arbitro_demux_synth.v:1" *)
module arbitro_demux_synth(mux_arbitro_1, reset_L, destiny, D0_out_synth, D1_out_synth);
  (* src = "arbitro_demux_synth.v:5" *)
  wire [5:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "arbitro_demux_synth.v:3" *)
  output [5:0] D0_out_synth;
  (* src = "arbitro_demux_synth.v:3" *)
  output [5:0] D1_out_synth;
  (* src = "arbitro_demux_synth.v:2" *)
  input destiny;
  (* src = "arbitro_demux_synth.v:1" *)
  input [5:0] mux_arbitro_1;
  (* src = "arbitro_demux_synth.v:2" *)
  input reset_L;
  NOT _10_ (
    .A(destiny),
    .Y(_03_)
  );
  NAND _11_ (
    .A(mux_arbitro_1[0]),
    .B(reset_L),
    .Y(_04_)
  );
  NOT _12_ (
    .A(_04_),
    .Y(_00_[0])
  );
  NAND _13_ (
    .A(reset_L),
    .B(mux_arbitro_1[1]),
    .Y(_05_)
  );
  NOT _14_ (
    .A(_05_),
    .Y(_00_[1])
  );
  NAND _15_ (
    .A(reset_L),
    .B(mux_arbitro_1[2]),
    .Y(_06_)
  );
  NOT _16_ (
    .A(_06_),
    .Y(_00_[2])
  );
  NAND _17_ (
    .A(reset_L),
    .B(mux_arbitro_1[3]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_00_[3])
  );
  NAND _19_ (
    .A(reset_L),
    .B(mux_arbitro_1[4]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_00_[4])
  );
  NAND _21_ (
    .A(reset_L),
    .B(mux_arbitro_1[5]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_00_[5])
  );
  NAND _23_ (
    .A(reset_L),
    .B(destiny),
    .Y(_01_)
  );
  NAND _24_ (
    .A(reset_L),
    .B(_03_),
    .Y(_02_)
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _25_ (
    .D(_00_[0]),
    .E(_01_),
    .Q(D0_out_synth[0])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _26_ (
    .D(_00_[1]),
    .E(_01_),
    .Q(D0_out_synth[1])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _27_ (
    .D(_00_[2]),
    .E(_01_),
    .Q(D0_out_synth[2])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _28_ (
    .D(_00_[3]),
    .E(_01_),
    .Q(D0_out_synth[3])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _29_ (
    .D(_00_[4]),
    .E(_01_),
    .Q(D0_out_synth[4])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _30_ (
    .D(_00_[5]),
    .E(_01_),
    .Q(D0_out_synth[5])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _31_ (
    .D(_00_[0]),
    .E(_02_),
    .Q(D1_out_synth[0])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _32_ (
    .D(_00_[1]),
    .E(_02_),
    .Q(D1_out_synth[1])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _33_ (
    .D(_00_[2]),
    .E(_02_),
    .Q(D1_out_synth[2])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _34_ (
    .D(_00_[3]),
    .E(_02_),
    .Q(D1_out_synth[3])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _35_ (
    .D(_00_[4]),
    .E(_02_),
    .Q(D1_out_synth[4])
  );
  (* src = "arbitro_demux_synth.v:5" *)
  \$_DLATCH_P_  _36_ (
    .D(_00_[5]),
    .E(_02_),
    .Q(D1_out_synth[5])
  );
endmodule

(* cells_not_processed =  1  *)
(* src = "arbitro_enrutamiento_synth.v:6" *)
module arbitro_enrutamiento_synth(VC0, VC1, clk, reset_L, VC0_empty, VC1_empty, D1_pause, D0_pause, VC1_pop_synth, VC0_pop_synth, D0, D1);
  (* src = "arbitro_enrutamiento_synth.v:10" *)
  output [5:0] D0;
  (* src = "arbitro_enrutamiento_synth.v:8" *)
  input D0_pause;
  (* src = "arbitro_enrutamiento_synth.v:10" *)
  output [5:0] D1;
  (* src = "arbitro_enrutamiento_synth.v:8" *)
  input D1_pause;
  (* src = "arbitro_enrutamiento_synth.v:6" *)
  input [5:0] VC0;
  (* src = "arbitro_enrutamiento_synth.v:8" *)
  input VC0_empty;
  (* src = "arbitro_enrutamiento_synth.v:9" *)
  output VC0_pop_synth;
  (* src = "arbitro_enrutamiento_synth.v:6" *)
  input [5:0] VC1;
  (* src = "arbitro_enrutamiento_synth.v:8" *)
  input VC1_empty;
  (* src = "arbitro_enrutamiento_synth.v:9" *)
  output VC1_pop_synth;
  (* src = "arbitro_enrutamiento_synth.v:7" *)
  input clk;
  (* src = "arbitro_enrutamiento_synth.v:13" *)
  (* unused_bits = "0" *)
  wire pop_delay_VC0;
  (* src = "arbitro_enrutamiento_synth.v:13" *)
  (* unused_bits = "0" *)
  wire pop_delay_VC1;
  (* src = "arbitro_enrutamiento_synth.v:7" *)
  input reset_L;
  (* module_not_derived = 32'd1 *)
  (* src = "arbitro_enrutamiento_synth.v:37" *)
  logica_pops_synth u_logica_pops_synth (
    .D0_pause(D0_pause),
    .D1_pause(D1_pause),
    .VC0_empty(VC0_empty),
    .VC0_pop_synth(VC0_pop_synth),
    .VC1_empty(VC1_empty),
    .VC1_pop_synth(VC1_pop_synth),
    .clk(clk),
    .pop_delay_VC0(pop_delay_VC0),
    .pop_delay_VC1(pop_delay_VC1)
  );
endmodule

(* cells_not_processed =  1  *)
(* src = "arbitro_mux_synth.v:1" *)
module arbitro_mux_synth(reset_L, clk, VC0, VC1, pop_delay_VC0, pop_delay_VC1, VC0_empty, mux_arbitro_1, destiny);
  (* src = "arbitro_mux_synth.v:9" *)
  wire _000_;
  (* src = "arbitro_mux_synth.v:9" *)
  wire [5:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  (* src = "arbitro_mux_synth.v:2" *)
  input [5:0] VC0;
  (* src = "arbitro_mux_synth.v:5" *)
  input VC0_empty;
  (* src = "arbitro_mux_synth.v:3" *)
  input [5:0] VC1;
  (* src = "arbitro_mux_synth.v:1" *)
  input clk;
  (* src = "arbitro_mux_synth.v:7" *)
  output destiny;
  (* src = "arbitro_mux_synth.v:6" *)
  output [5:0] mux_arbitro_1;
  (* src = "arbitro_mux_synth.v:4" *)
  input pop_delay_VC0;
  (* src = "arbitro_mux_synth.v:4" *)
  input pop_delay_VC1;
  (* src = "arbitro_mux_synth.v:1" *)
  input reset_L;
  NOT _081_ (
    .A(reset_L),
    .Y(_017_)
  );
  NOT _082_ (
    .A(destiny),
    .Y(_018_)
  );
  NOT _083_ (
    .A(pop_delay_VC0),
    .Y(_019_)
  );
  NOT _084_ (
    .A(mux_arbitro_1[0]),
    .Y(_020_)
  );
  NOT _085_ (
    .A(VC1[0]),
    .Y(_021_)
  );
  NOT _086_ (
    .A(mux_arbitro_1[1]),
    .Y(_022_)
  );
  NOT _087_ (
    .A(VC1[1]),
    .Y(_023_)
  );
  NOT _088_ (
    .A(mux_arbitro_1[2]),
    .Y(_024_)
  );
  NOT _089_ (
    .A(VC1[2]),
    .Y(_025_)
  );
  NOT _090_ (
    .A(mux_arbitro_1[3]),
    .Y(_026_)
  );
  NOT _091_ (
    .A(VC1[3]),
    .Y(_027_)
  );
  NOT _092_ (
    .A(mux_arbitro_1[4]),
    .Y(_028_)
  );
  NOT _093_ (
    .A(mux_arbitro_1[5]),
    .Y(_029_)
  );
  NOT _094_ (
    .A(VC1[5]),
    .Y(_030_)
  );
  NOR _095_ (
    .A(_018_),
    .B(pop_delay_VC1),
    .Y(_031_)
  );
  NAND _096_ (
    .A(pop_delay_VC1),
    .B(VC1[4]),
    .Y(_032_)
  );
  NAND _097_ (
    .A(VC0_empty),
    .B(_032_),
    .Y(_033_)
  );
  NOR _098_ (
    .A(_031_),
    .B(_033_),
    .Y(_034_)
  );
  NAND _099_ (
    .A(destiny),
    .B(_019_),
    .Y(_035_)
  );
  NAND _100_ (
    .A(VC0[4]),
    .B(pop_delay_VC0),
    .Y(_036_)
  );
  NOT _101_ (
    .A(_036_),
    .Y(_037_)
  );
  NOR _102_ (
    .A(VC0_empty),
    .B(_037_),
    .Y(_038_)
  );
  NAND _103_ (
    .A(_035_),
    .B(_038_),
    .Y(_039_)
  );
  NAND _104_ (
    .A(reset_L),
    .B(_039_),
    .Y(_040_)
  );
  NOR _105_ (
    .A(_034_),
    .B(_040_),
    .Y(_000_)
  );
  NOR _106_ (
    .A(mux_arbitro_1[0]),
    .B(pop_delay_VC1),
    .Y(_041_)
  );
  NAND _107_ (
    .A(_021_),
    .B(pop_delay_VC1),
    .Y(_042_)
  );
  NAND _108_ (
    .A(VC0_empty),
    .B(_042_),
    .Y(_043_)
  );
  NOR _109_ (
    .A(_041_),
    .B(_043_),
    .Y(_044_)
  );
  NAND _110_ (
    .A(pop_delay_VC0),
    .B(VC0[0]),
    .Y(_045_)
  );
  NOT _111_ (
    .A(_045_),
    .Y(_046_)
  );
  NOR _112_ (
    .A(pop_delay_VC0),
    .B(_020_),
    .Y(_047_)
  );
  NOR _113_ (
    .A(_046_),
    .B(_047_),
    .Y(_048_)
  );
  NOR _114_ (
    .A(VC0_empty),
    .B(_048_),
    .Y(_049_)
  );
  NOR _115_ (
    .A(_044_),
    .B(_049_),
    .Y(_050_)
  );
  NOR _116_ (
    .A(_017_),
    .B(_050_),
    .Y(_001_[0])
  );
  NOR _117_ (
    .A(pop_delay_VC1),
    .B(mux_arbitro_1[1]),
    .Y(_051_)
  );
  NAND _118_ (
    .A(pop_delay_VC1),
    .B(_023_),
    .Y(_052_)
  );
  NAND _119_ (
    .A(VC0_empty),
    .B(_052_),
    .Y(_053_)
  );
  NOR _120_ (
    .A(_051_),
    .B(_053_),
    .Y(_054_)
  );
  NAND _121_ (
    .A(pop_delay_VC0),
    .B(VC0[1]),
    .Y(_055_)
  );
  NOT _122_ (
    .A(_055_),
    .Y(_056_)
  );
  NOR _123_ (
    .A(pop_delay_VC0),
    .B(_022_),
    .Y(_057_)
  );
  NOR _124_ (
    .A(_056_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _125_ (
    .A(VC0_empty),
    .B(_058_),
    .Y(_059_)
  );
  NOR _126_ (
    .A(_054_),
    .B(_059_),
    .Y(_060_)
  );
  NOR _127_ (
    .A(_017_),
    .B(_060_),
    .Y(_001_[1])
  );
  NOR _128_ (
    .A(pop_delay_VC1),
    .B(mux_arbitro_1[2]),
    .Y(_061_)
  );
  NAND _129_ (
    .A(pop_delay_VC1),
    .B(_025_),
    .Y(_062_)
  );
  NAND _130_ (
    .A(VC0_empty),
    .B(_062_),
    .Y(_063_)
  );
  NOR _131_ (
    .A(_061_),
    .B(_063_),
    .Y(_064_)
  );
  NAND _132_ (
    .A(pop_delay_VC0),
    .B(VC0[2]),
    .Y(_065_)
  );
  NOT _133_ (
    .A(_065_),
    .Y(_066_)
  );
  NOR _134_ (
    .A(pop_delay_VC0),
    .B(_024_),
    .Y(_067_)
  );
  NOR _135_ (
    .A(_066_),
    .B(_067_),
    .Y(_068_)
  );
  NOR _136_ (
    .A(VC0_empty),
    .B(_068_),
    .Y(_069_)
  );
  NOR _137_ (
    .A(_064_),
    .B(_069_),
    .Y(_070_)
  );
  NOR _138_ (
    .A(_017_),
    .B(_070_),
    .Y(_001_[2])
  );
  NOR _139_ (
    .A(pop_delay_VC1),
    .B(mux_arbitro_1[3]),
    .Y(_071_)
  );
  NAND _140_ (
    .A(pop_delay_VC1),
    .B(_027_),
    .Y(_072_)
  );
  NAND _141_ (
    .A(VC0_empty),
    .B(_072_),
    .Y(_073_)
  );
  NOR _142_ (
    .A(_071_),
    .B(_073_),
    .Y(_074_)
  );
  NAND _143_ (
    .A(pop_delay_VC0),
    .B(VC0[3]),
    .Y(_075_)
  );
  NOT _144_ (
    .A(_075_),
    .Y(_076_)
  );
  NOR _145_ (
    .A(pop_delay_VC0),
    .B(_026_),
    .Y(_077_)
  );
  NOR _146_ (
    .A(_076_),
    .B(_077_),
    .Y(_078_)
  );
  NOR _147_ (
    .A(VC0_empty),
    .B(_078_),
    .Y(_079_)
  );
  NOR _148_ (
    .A(_074_),
    .B(_079_),
    .Y(_080_)
  );
  NOR _149_ (
    .A(_017_),
    .B(_080_),
    .Y(_001_[3])
  );
  NAND _150_ (
    .A(_019_),
    .B(mux_arbitro_1[4]),
    .Y(_002_)
  );
  NAND _151_ (
    .A(_038_),
    .B(_002_),
    .Y(_003_)
  );
  NOR _152_ (
    .A(pop_delay_VC1),
    .B(_028_),
    .Y(_004_)
  );
  NOR _153_ (
    .A(_033_),
    .B(_004_),
    .Y(_005_)
  );
  NAND _154_ (
    .A(reset_L),
    .B(_003_),
    .Y(_006_)
  );
  NOR _155_ (
    .A(_005_),
    .B(_006_),
    .Y(_001_[4])
  );
  NOR _156_ (
    .A(pop_delay_VC1),
    .B(mux_arbitro_1[5]),
    .Y(_007_)
  );
  NAND _157_ (
    .A(pop_delay_VC1),
    .B(_030_),
    .Y(_008_)
  );
  NAND _158_ (
    .A(VC0_empty),
    .B(_008_),
    .Y(_009_)
  );
  NOR _159_ (
    .A(_007_),
    .B(_009_),
    .Y(_010_)
  );
  NAND _160_ (
    .A(pop_delay_VC0),
    .B(VC0[5]),
    .Y(_011_)
  );
  NOT _161_ (
    .A(_011_),
    .Y(_012_)
  );
  NOR _162_ (
    .A(pop_delay_VC0),
    .B(_029_),
    .Y(_013_)
  );
  NOR _163_ (
    .A(_012_),
    .B(_013_),
    .Y(_014_)
  );
  NOR _164_ (
    .A(VC0_empty),
    .B(_014_),
    .Y(_015_)
  );
  NOR _165_ (
    .A(_010_),
    .B(_015_),
    .Y(_016_)
  );
  NOR _166_ (
    .A(_017_),
    .B(_016_),
    .Y(_001_[5])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _167_ (
    .C(clk),
    .D(_001_[0]),
    .Q(mux_arbitro_1[0])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _168_ (
    .C(clk),
    .D(_001_[1]),
    .Q(mux_arbitro_1[1])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _169_ (
    .C(clk),
    .D(_001_[2]),
    .Q(mux_arbitro_1[2])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _170_ (
    .C(clk),
    .D(_001_[3]),
    .Q(mux_arbitro_1[3])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _171_ (
    .C(clk),
    .D(_001_[4]),
    .Q(mux_arbitro_1[4])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _172_ (
    .C(clk),
    .D(_001_[5]),
    .Q(mux_arbitro_1[5])
  );
  (* src = "arbitro_mux_synth.v:9" *)
  DFF _173_ (
    .C(clk),
    .D(_000_),
    .Q(destiny)
  );
endmodule

(* cells_not_processed =  1  *)
(* src = "logica_pops_synth.v:1" *)
module logica_pops_synth(VC0_empty, VC1_empty, D0_pause, D1_pause, clk, VC0_pop_synth, VC1_pop_synth, pop_delay_VC0, pop_delay_VC1);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "logica_pops_synth.v:1" *)
  input D0_pause;
  (* src = "logica_pops_synth.v:1" *)
  input D1_pause;
  (* src = "logica_pops_synth.v:1" *)
  input VC0_empty;
  (* src = "logica_pops_synth.v:2" *)
  output VC0_pop_synth;
  (* src = "logica_pops_synth.v:1" *)
  input VC1_empty;
  (* src = "logica_pops_synth.v:2" *)
  output VC1_pop_synth;
  (* src = "logica_pops_synth.v:1" *)
  input clk;
  (* src = "logica_pops_synth.v:2" *)
  output pop_delay_VC0;
  (* src = "logica_pops_synth.v:2" *)
  output pop_delay_VC1;
  NOR _3_ (
    .A(D0_pause),
    .B(D1_pause),
    .Y(_1_)
  );
  NOT _4_ (
    .A(_1_),
    .Y(_2_)
  );
  NOR _5_ (
    .A(VC0_empty),
    .B(_2_),
    .Y(VC0_pop_synth)
  );
  NAND _6_ (
    .A(VC0_empty),
    .B(_1_),
    .Y(_0_)
  );
  NOR _7_ (
    .A(VC1_empty),
    .B(_0_),
    .Y(VC1_pop_synth)
  );
  (* src = "logica_pops_synth.v:4" *)
  DFF _8_ (
    .C(clk),
    .D(VC0_pop_synth),
    .Q(pop_delay_VC0)
  );
  (* src = "logica_pops_synth.v:4" *)
  DFF _9_ (
    .C(clk),
    .D(VC1_pop_synth),
    .Q(pop_delay_VC1)
  );
endmodule
