$date
	Tue Nov  3 23:22:57 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module bancopruebas $end
$var wire 1 ! reset_L $end
$var wire 1 " clk $end
$var wire 1 # VC1_pop $end
$var wire 1 $ VC1_empty $end
$var wire 6 % VC1 [5:0] $end
$var wire 1 & VC0_pop $end
$var wire 1 ' VC0_empty $end
$var wire 6 ( VC0 [5:0] $end
$var wire 1 ) D1_pause $end
$var wire 6 * D1 [5:0] $end
$var wire 1 + D0_pause $end
$var wire 6 , D0 [5:0] $end
$scope module u_arbitro_enrutamiento $end
$var wire 1 ! reset_L $end
$var wire 1 - pop_delay_VC1 $end
$var wire 1 . pop_delay_VC0 $end
$var wire 6 / mux_arbitro_1 [5:0] $end
$var wire 1 " clk $end
$var wire 1 # VC1_pop $end
$var wire 1 $ VC1_empty $end
$var wire 6 0 VC1 [5:0] $end
$var wire 1 & VC0_pop $end
$var wire 1 ' VC0_empty $end
$var wire 6 1 VC0 [5:0] $end
$var wire 1 ) D1_pause $end
$var wire 6 2 D1 [5:0] $end
$var wire 1 + D0_pause $end
$var wire 6 3 D0 [5:0] $end
$scope module u_arbitro_demux $end
$var wire 1 ! reset_L $end
$var wire 6 4 mux_arbitro_1 [5:0] $end
$var reg 6 5 D0 [5:0] $end
$var reg 6 6 D1 [5:0] $end
$upscope $end
$scope module u_arbitro_muxes $end
$var wire 1 ! reset_L $end
$var wire 1 - pop_delay_VC1 $end
$var wire 1 . pop_delay_VC0 $end
$var wire 1 " clk $end
$var wire 6 7 VC1 [5:0] $end
$var wire 1 ' VC0_empty $end
$var wire 6 8 VC0 [5:0] $end
$var reg 6 9 mux_arbitro_1 [5:0] $end
$upscope $end
$scope module u_logica_pops $end
$var wire 1 " clk $end
$var wire 1 $ VC1_empty $end
$var wire 1 ' VC0_empty $end
$var wire 1 ) D1_pause $end
$var wire 1 + D0_pause $end
$var reg 1 & VC0_pop $end
$var reg 1 # VC1_pop $end
$var reg 1 . pop_delay_VC0 $end
$var reg 1 - pop_delay_VC1 $end
$upscope $end
$upscope $end
$scope module u_probador_arbitro $end
$var wire 6 : D0 [5:0] $end
$var wire 6 ; D1 [5:0] $end
$var wire 1 & VC0_pop $end
$var wire 1 # VC1_pop $end
$var reg 1 + D0_pause $end
$var reg 1 ) D1_pause $end
$var reg 6 < VC0 [5:0] $end
$var reg 1 ' VC0_empty $end
$var reg 6 = VC1 [5:0] $end
$var reg 1 $ VC1_empty $end
$var reg 1 " clk $end
$var reg 1 ! reset_L $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
b0 ;
b0 :
b0 9
bx 8
bx 7
b0 6
b0 5
b0 4
b0 3
b0 2
bx 1
bx 0
b0 /
1.
0-
b0 ,
0+
b0 *
0)
bx (
0'
1&
bx %
0$
0#
1"
0!
$end
#1
0"
#2
b110110 %
b110110 0
b110110 7
b110110 =
b110100 (
b110100 1
b110100 8
b110100 <
1!
1"
#3
0"
#4
b110100 *
b110100 2
b110100 6
b110100 ;
b110100 /
b110100 4
b110100 9
b101100 %
b101100 0
b101100 7
b101100 =
b100101 (
b100101 1
b100101 8
b100101 <
1"
#5
0"
#6
0&
1#
b100101 ,
b100101 3
b100101 5
b100101 :
b110100 %
b110100 0
b110100 7
b110100 =
b110100 (
b110100 1
b110100 8
b110100 <
1'
b100101 /
b100101 4
b100101 9
1"
#7
0"
#8
0#
1-
0.
b110101 %
b110101 0
b110101 7
b110101 =
b110110 (
b110110 1
b110110 8
b110110 <
1+
1"
#9
0"
#10
1#
b110101 *
b110101 2
b110101 6
b110101 ;
b110100 %
b110100 0
b110100 7
b110100 =
0+
0-
b110101 /
b110101 4
b110101 9
1"
#11
0"
#12
1-
b10110 %
b10110 0
b10110 7
b10110 =
b111101 (
b111101 1
b111101 8
b111101 <
1"
#13
0"
#14
b10110 *
b10110 2
b10110 6
b10110 ;
b10110 /
b10110 4
b10110 9
1"
#15
0"
#16
1"
