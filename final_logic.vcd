$date
	Mon Nov  9 17:17:54 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module banco_final_logic $end
$var wire 1 ! reset_L $end
$var wire 1 " pop_VC1_fifo $end
$var wire 1 # pop_VC0_fifo $end
$var wire 1 $ error_D1 $end
$var wire 1 % error_D0 $end
$var wire 1 & empty_fifo_VC1 $end
$var wire 1 ' empty_fifo_VC0 $end
$var wire 6 ( data_out_VC1 [5:0] $end
$var wire 6 ) data_out_VC0 [5:0] $end
$var wire 6 * data_out_D1 [5:0] $end
$var wire 6 + data_out_D0 [5:0] $end
$var wire 1 , clk $end
$var wire 1 - D1_pop $end
$var wire 1 . D0_pop $end
$scope module final_logic_cond $end
$var wire 1 ! reset_L $end
$var wire 1 " pop_VC1_fifo $end
$var wire 1 # pop_VC0_fifo $end
$var wire 1 / fulloralmostfull_D1 $end
$var wire 1 0 fulloralmostfull_D0 $end
$var wire 1 1 full_fifo_D1 $end
$var wire 1 2 full_fifo_D0 $end
$var wire 1 $ error_D1 $end
$var wire 1 % error_D0 $end
$var wire 1 & empty_fifo_VC1 $end
$var wire 1 ' empty_fifo_VC0 $end
$var wire 1 3 empty_fifo_D1 $end
$var wire 1 4 empty_fifo_D0 $end
$var wire 6 5 data_out_VC1 [5:0] $end
$var wire 6 6 data_out_VC0 [5:0] $end
$var wire 6 7 data_out_D1 [5:0] $end
$var wire 6 8 data_out_D0 [5:0] $end
$var wire 1 , clk $end
$var wire 1 9 almost_empty_fifo_D1 $end
$var wire 1 : almost_empty_fifo_D0 $end
$var wire 1 ; D1_push $end
$var wire 1 - D1_pop $end
$var wire 6 < D1_out [5:0] $end
$var wire 1 = D0_push $end
$var wire 1 . D0_pop $end
$var wire 6 > D0_out [5:0] $end
$scope module u_D0_fifo $end
$var wire 1 = wr_enable $end
$var wire 1 ! reset_L $end
$var wire 1 . rd_enable $end
$var wire 1 2 full_fifo_D0 $end
$var wire 1 % error_D0 $end
$var wire 1 4 empty_fifo_D0 $end
$var wire 6 ? data_in [5:0] $end
$var wire 1 , clk $end
$var wire 1 0 almost_full_fifo_D0 $end
$var wire 1 : almost_empty_fifo_D0 $end
$var reg 3 @ cnt [2:0] $end
$var reg 6 A data_out_D0 [5:0] $end
$var reg 2 B rd_ptr [1:0] $end
$var reg 2 C wr_ptr [1:0] $end
$upscope $end
$scope module u_D1_fifo $end
$var wire 1 ; wr_enable $end
$var wire 1 ! reset_L $end
$var wire 1 - rd_enable $end
$var wire 1 1 full_fifo_D1 $end
$var wire 1 $ error_D1 $end
$var wire 1 3 empty_fifo_D1 $end
$var wire 6 D data_in [5:0] $end
$var wire 1 , clk $end
$var wire 1 / almost_full_fifo_D1 $end
$var wire 1 9 almost_empty_fifo_D1 $end
$var reg 3 E cnt [2:0] $end
$var reg 6 F data_out_D1 [5:0] $end
$var reg 2 G rd_ptr [1:0] $end
$var reg 2 H wr_ptr [1:0] $end
$upscope $end
$scope module u_arbitro_enrutamiento $end
$var wire 1 0 D0_pause $end
$var wire 1 / D1_pause $end
$var wire 1 ! reset_L $end
$var wire 1 I pop_delay_VC1 $end
$var wire 1 J pop_delay_VC0 $end
$var wire 1 , clk $end
$var wire 1 " VC1_pop $end
$var wire 1 & VC1_empty $end
$var wire 6 K VC1 [5:0] $end
$var wire 1 # VC0_pop $end
$var wire 1 ' VC0_empty $end
$var wire 6 L VC0 [5:0] $end
$var wire 1 ; D1_push $end
$var wire 6 M D1_out [5:0] $end
$var wire 1 = D0_push $end
$var wire 6 N D0_out [5:0] $end
$scope module u_arbitro_muxes $end
$var wire 1 ! reset_L $end
$var wire 1 I pop_delay_VC1 $end
$var wire 1 J pop_delay_VC0 $end
$var wire 1 , clk $end
$var wire 1 & VC1_empty $end
$var wire 6 O VC1 [5:0] $end
$var wire 1 ' VC0_empty $end
$var wire 6 P VC0 [5:0] $end
$var reg 6 Q D0_out [5:0] $end
$var reg 1 = D0_push $end
$var reg 6 R D1_out [5:0] $end
$var reg 1 ; D1_push $end
$upscope $end
$scope module u_logica_pops $end
$var wire 1 0 D0_pause $end
$var wire 1 / D1_pause $end
$var wire 1 , clk $end
$var wire 1 & VC1_empty $end
$var wire 1 ' VC0_empty $end
$var reg 1 # VC0_pop $end
$var reg 1 " VC1_pop $end
$var reg 1 J pop_delay_VC0 $end
$var reg 1 I pop_delay_VC1 $end
$upscope $end
$upscope $end
$upscope $end
$scope module probador_final_logic $end
$var wire 6 S data_out_D0 [5:0] $end
$var wire 6 T data_out_D1 [5:0] $end
$var wire 1 % error_D0 $end
$var wire 1 $ error_D1 $end
$var wire 1 # pop_VC0_fifo $end
$var wire 1 " pop_VC1_fifo $end
$var reg 1 . D0_pop $end
$var reg 1 - D1_pop $end
$var reg 1 , clk $end
$var reg 6 U data_out_VC0 [5:0] $end
$var reg 6 V data_out_VC1 [5:0] $end
$var reg 1 ' empty_fifo_VC0 $end
$var reg 1 & empty_fifo_VC1 $end
$var reg 1 ! reset_L $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx V
bx U
b0 T
b0 S
b0 R
b0 Q
bx P
bx O
b0 N
b0 M
bx L
bx K
0J
0I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
0=
b0 <
0;
0:
09
b0 8
b0 7
bx 6
bx 5
14
13
02
01
00
0/
0.
0-
1,
b0 +
b0 *
bx )
bx (
0'
0&
0%
0$
1#
0"
0!
$end
#1
0,
#2
b110110 (
b110110 5
b110110 K
b110110 O
b110110 V
b110100 )
b110100 6
b110100 L
b110100 P
b110100 U
1!
1J
1-
1,
#3
0,
#4
1;
b110100 <
b110100 D
b110100 M
b110100 R
b1 G
bx *
bx 7
bx F
bx T
03
1$
b111 E
b101100 (
b101100 5
b101100 K
b101100 O
b101100 V
b100101 )
b100101 6
b100101 L
b100101 P
b100101 U
1,
#5
0,
#6
0#
1"
b110100 (
b110100 5
b110100 K
b110100 O
b110100 V
b110100 )
b110100 6
b110100 L
b110100 P
b110100 U
1'
b10 G
b1 H
0;
1=
b0 <
b0 D
b0 M
b0 R
b100101 >
b100101 ?
b100101 N
b100101 Q
1,
#7
0,
#8
0=
b0 >
b0 ?
b0 N
b0 Q
1I
0J
b1 C
04
1:
b1 @
b11 G
b110 E
b110101 (
b110101 5
b110101 K
b110101 O
b110101 V
b110110 )
b110110 6
b110110 L
b110110 P
b110110 U
0-
1.
1,
#9
0,
#10
b110100 (
b110100 5
b110100 K
b110100 O
b110100 V
0.
b0 *
b0 7
b0 F
b0 T
14
0:
b0 @
b1 B
b100101 +
b100101 8
b100101 A
b100101 S
1;
b110101 <
b110101 D
b110101 M
b110101 R
1,
#11
0,
#12
b110100 <
b110100 D
b110100 M
b110100 R
b0 +
b0 8
b0 A
b0 S
b10 H
b111 E
b10110 (
b10110 5
b10110 K
b10110 O
b10110 V
b111101 )
b111101 6
b111101 L
b111101 P
b111101 U
1,
#13
0,
#14
13
0$
b0 E
b11 H
b10110 <
b10110 D
b10110 M
b10110 R
1,
#15
0,
#16
b0 H
03
19
b1 E
1,
