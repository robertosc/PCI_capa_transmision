$date
	Wed Nov  4 11:34:16 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module banco_initial_logic $end
$var wire 1 ! wr_enable $end
$var wire 1 " reset $end
$var wire 1 # pop_VC1_fifo $end
$var wire 1 $ pop_VC0_fifo $end
$var wire 1 % full_fifo_VC1 $end
$var wire 1 & full_fifo_VC0 $end
$var wire 1 ' error_VC1 $end
$var wire 1 ( error_VC0 $end
$var wire 1 ) empty_fifo_VC1 $end
$var wire 1 * empty_fifo_VC0 $end
$var wire 6 + data_out_VC1 [5:0] $end
$var wire 6 , data_out_VC0 [5:0] $end
$var wire 6 - data_in [5:0] $end
$var wire 1 . clk $end
$var wire 1 / almost_full_fifo_VC1 $end
$var wire 1 0 almost_full_fifo_VC0 $end
$var wire 1 1 almost_empty_fifo_VC1 $end
$var wire 1 2 almost_empty_fifo_VC0 $end
$scope module initial_logic1 $end
$var wire 1 ! wr_enable $end
$var wire 1 3 valid_pop_out $end
$var wire 1 " reset $end
$var wire 1 4 push_vc1 $end
$var wire 1 5 push_vc0 $end
$var wire 1 6 pop_main_fifo $end
$var wire 1 # pop_VC1_fifo $end
$var wire 1 $ pop_VC0_fifo $end
$var wire 1 % full_fifo_VC1 $end
$var wire 1 & full_fifo_VC0 $end
$var wire 1 7 full_fifo $end
$var wire 1 ' error_VC1 $end
$var wire 1 ( error_VC0 $end
$var wire 1 8 error $end
$var wire 1 9 empty_main_fifo $end
$var wire 1 ) empty_fifo_VC1 $end
$var wire 1 * empty_fifo_VC0 $end
$var wire 6 : data_out_demux_initial_vc1 [5:0] $end
$var wire 6 ; data_out_demux_initial_vc0 [5:0] $end
$var wire 6 < data_out_VC1 [5:0] $end
$var wire 6 = data_out_VC0 [5:0] $end
$var wire 6 > data_in_demux_initial [5:0] $end
$var wire 6 ? data_in [5:0] $end
$var wire 1 . clk $end
$var wire 1 / almost_full_fifo_VC1 $end
$var wire 1 0 almost_full_fifo_VC0 $end
$var wire 1 @ almost_full_fifo $end
$var wire 1 1 almost_empty_fifo_VC1 $end
$var wire 1 2 almost_empty_fifo_VC0 $end
$var wire 1 A almost_empty_fifo $end
$scope module comb_initial_1 $end
$var wire 1 / pause_vc1 $end
$var wire 1 0 pause_vc0 $end
$var wire 1 9 empty_main_fifo $end
$var wire 1 . clk $end
$var reg 1 6 pop_main_fifo $end
$var reg 1 3 valid_pop_out $end
$upscope $end
$scope module demux_initial_1 $end
$var wire 1 3 valid_pop_out $end
$var wire 1 " reset $end
$var wire 6 B data_in_demux_initial [5:0] $end
$var wire 1 . clk $end
$var reg 6 C data_out_demux_initial_vc0 [5:0] $end
$var reg 6 D data_out_demux_initial_vc1 [5:0] $end
$var reg 1 5 push_vc0 $end
$var reg 1 4 push_vc1 $end
$upscope $end
$scope module fifo_VC0 $end
$var wire 6 E data_in [5:0] $end
$var wire 1 5 wr_enable $end
$var wire 1 " reset $end
$var wire 1 $ rd_enable $end
$var wire 1 & full_fifo_VC0 $end
$var wire 1 ( error_VC0 $end
$var wire 1 * empty_fifo_VC0 $end
$var wire 1 . clk $end
$var wire 1 0 almost_full_fifo_VC0 $end
$var wire 1 2 almost_empty_fifo_VC0 $end
$var reg 5 F cnt [4:0] $end
$var reg 6 G data_out_VC0 [5:0] $end
$var reg 4 H rd_ptr [3:0] $end
$var reg 4 I wr_ptr [3:0] $end
$upscope $end
$scope module fifo_VC1 $end
$var wire 6 J data_in [5:0] $end
$var wire 1 4 wr_enable $end
$var wire 1 " reset $end
$var wire 1 # rd_enable $end
$var wire 1 % full_fifo_VC1 $end
$var wire 1 ' error_VC1 $end
$var wire 1 ) empty_fifo_VC1 $end
$var wire 1 . clk $end
$var wire 1 / almost_full_fifo_VC1 $end
$var wire 1 1 almost_empty_fifo_VC1 $end
$var reg 5 K cnt [4:0] $end
$var reg 6 L data_out_VC1 [5:0] $end
$var reg 4 M rd_ptr [3:0] $end
$var reg 4 N wr_ptr [3:0] $end
$upscope $end
$scope module fifo_main $end
$var wire 1 6 rd_enable $end
$var wire 1 ! wr_enable $end
$var wire 1 " reset $end
$var wire 1 7 full_fifo $end
$var wire 1 8 error $end
$var wire 1 9 empty_fifo $end
$var wire 6 O data_in [5:0] $end
$var wire 1 . clk $end
$var wire 1 @ almost_full_fifo $end
$var wire 1 A almost_empty_fifo $end
$var reg 3 P cnt [2:0] $end
$var reg 6 Q data_out [5:0] $end
$var reg 2 R rd_ptr [1:0] $end
$var reg 2 S wr_ptr [1:0] $end
$upscope $end
$upscope $end
$scope module probador_initial_logic_1 $end
$var wire 1 2 almost_empty_fifo_VC0 $end
$var wire 1 1 almost_empty_fifo_VC1 $end
$var wire 1 0 almost_full_fifo_VC0 $end
$var wire 1 / almost_full_fifo_VC1 $end
$var wire 6 T data_out_VC0 [5:0] $end
$var wire 6 U data_out_VC1 [5:0] $end
$var wire 1 * empty_fifo_VC0 $end
$var wire 1 ) empty_fifo_VC1 $end
$var wire 1 ( error_VC0 $end
$var wire 1 ' error_VC1 $end
$var wire 1 & full_fifo_VC0 $end
$var wire 1 % full_fifo_VC1 $end
$var reg 1 . clk $end
$var reg 6 V data_in [5:0] $end
$var reg 1 $ pop_VC0_fifo $end
$var reg 1 # pop_VC1_fifo $end
$var reg 1 " reset $end
$var reg 1 ! wr_enable $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
0A
0@
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
19
08
07
06
05
04
x3
02
01
00
0/
1.
b0 -
b0 ,
b0 +
1*
1)
0(
0'
0&
0%
0$
0#
0"
0!
$end
#1
0.
#2
03
1.
#3
0.
#4
1.
#5
0.
#6
b1 -
b1 ?
b1 O
b1 V
1"
1!
1.
#7
0.
#8
16
b1 S
09
1A
b1 P
b10 -
b10 ?
b10 O
b10 V
1.
#9
0.
#10
b11 -
b11 ?
b11 O
b11 V
13
b1 R
b1 >
b1 B
b1 Q
b10 S
1.
#11
0.
#12
b11 S
b10 R
b10 >
b10 B
b10 Q
15
b1 ;
b1 C
b1 E
b100 -
b100 ?
b100 O
b100 V
1.
#13
0.
#14
b100001 -
b100001 ?
b100001 O
b100001 V
0*
12
b1 F
b1 I
b10 ;
b10 C
b10 E
b11 R
b11 >
b11 B
b11 Q
b0 S
1.
#15
0.
#16
b1 S
b0 R
b100 >
b100 B
b100 Q
b11 ;
b11 C
b11 E
b10 I
02
b10 F
b100010 -
b100010 ?
b100010 O
b100010 V
1.
#17
0.
#18
b100011 -
b100011 ?
b100011 O
b100011 V
b11 F
b11 I
b100 ;
b100 C
b100 E
b1 R
b100001 >
b100001 B
b100001 Q
b10 S
1.
#19
0.
#20
b11 S
b10 R
b100010 >
b100010 B
b100010 Q
05
14
b0 ;
b0 C
b0 E
b100001 :
b100001 D
b100001 J
b100 I
b100 F
b100100 -
b100100 ?
b100100 O
b100100 V
1.
#21
0.
#22
1$
0)
11
b1 K
b1 N
b100010 :
b100010 D
b100010 J
b11 R
b100011 >
b100011 B
b100011 Q
b0 S
1.
#23
0.
#24
b1 S
b0 R
b100100 >
b100100 B
b100100 Q
b100011 :
b100011 D
b100011 J
b1 H
b1 ,
b1 =
b1 G
b1 T
b11 F
b10 N
01
b10 K
1.
#25
0.
#26
0!
b11 K
b11 N
b10 F
b10 H
b10 ,
b10 =
b10 G
b10 T
b100100 :
b100100 D
b100100 J
b1 R
b10 S
1.
#27
0.
#28
06
b10 R
19
0A
b0 P
b11 H
b11 ,
b11 =
b11 G
b11 T
12
b1 F
b100 N
b100 K
1.
#29
0.
#30
1#
0$
b101 K
b101 N
1*
02
b0 F
b100 H
b100 ,
b100 =
b100 G
b100 T
03
b0 >
b0 B
b0 Q
1.
#31
0.
#32
04
b0 :
b0 D
b0 J
b0 ,
b0 =
b0 G
b0 T
b110 N
b1 M
b100001 +
b100001 <
b100001 L
b100001 U
1.
#33
0.
#34
b100 K
b10 M
b100010 +
b100010 <
b100010 L
b100010 U
1.
#35
0.
#36
b11 M
b100011 +
b100011 <
b100011 L
b100011 U
b11 K
1.
#37
0.
#38
b10 K
b100 M
b100100 +
b100100 <
b100100 L
b100100 U
1.
#39
0.
#40
b101 M
11
b1 K
1.
#41
0.
#42
0#
1)
01
b0 K
b110 M
1.
#43
0.
#44
b0 +
b0 <
b0 L
b0 U
1.
#45
0.
#46
1.
#47
0.
#48
1.
